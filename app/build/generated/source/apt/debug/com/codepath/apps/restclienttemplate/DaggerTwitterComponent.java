// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.codepath.apps.restclienttemplate;

import android.app.Application;
import android.content.SharedPreferences;
import com.codepath.apps.restclienttemplate.activities.ComposeActivity;
import com.codepath.apps.restclienttemplate.activities.ComposeActivity_MembersInjector;
import com.codepath.apps.restclienttemplate.activities.ProfileActivity;
import com.codepath.apps.restclienttemplate.activities.ProfileActivity_MembersInjector;
import com.codepath.apps.restclienttemplate.activities.TimelineActivity;
import com.codepath.apps.restclienttemplate.activities.TimelineActivity_MembersInjector;
import com.codepath.apps.restclienttemplate.activities.TweetActivity;
import com.codepath.apps.restclienttemplate.activities.TweetActivity_MembersInjector;
import com.codepath.apps.restclienttemplate.fragments.HomeTimelineFragment;
import com.codepath.apps.restclienttemplate.fragments.HomeTimelineFragment_MembersInjector;
import com.codepath.apps.restclienttemplate.fragments.MentionsTimelineFragment;
import com.codepath.apps.restclienttemplate.fragments.MentionsTimelineFragment_MembersInjector;
import com.codepath.apps.restclienttemplate.fragments.UserTimelineFragment;
import com.codepath.apps.restclienttemplate.fragments.UserTimelineFragment_MembersInjector;
import com.codepath.apps.restclienttemplate.network.TwitterClient;
import com.codepath.apps.restclienttemplate.utils.NetworkUtil;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerTwitterComponent implements TwitterComponent {
  private Provider<Application> providesApplicationProvider;

  private Provider<SharedPreferences> providesSharedPreferencesProvider;

  private MembersInjector<TimelineActivity> timelineActivityMembersInjector;

  private Provider<TwitterClient> providesTwitterClientProvider;

  private MembersInjector<ProfileActivity> profileActivityMembersInjector;

  private MembersInjector<ComposeActivity> composeActivityMembersInjector;

  private Provider<NetworkUtil> providesNetworkUtilProvider;

  private MembersInjector<TweetActivity> tweetActivityMembersInjector;

  private MembersInjector<HomeTimelineFragment> homeTimelineFragmentMembersInjector;

  private MembersInjector<MentionsTimelineFragment> mentionsTimelineFragmentMembersInjector;

  private MembersInjector<UserTimelineFragment> userTimelineFragmentMembersInjector;

  private DaggerTwitterComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providesApplicationProvider =
        DoubleCheck.provider(AppModule_ProvidesApplicationFactory.create(builder.appModule));

    this.providesSharedPreferencesProvider =
        DoubleCheck.provider(
            TwitterModule_ProvidesSharedPreferencesFactory.create(
                builder.twitterModule, providesApplicationProvider));

    this.timelineActivityMembersInjector =
        TimelineActivity_MembersInjector.create(providesSharedPreferencesProvider);

    this.providesTwitterClientProvider =
        DoubleCheck.provider(
            TwitterModule_ProvidesTwitterClientFactory.create(builder.twitterModule));

    this.profileActivityMembersInjector =
        ProfileActivity_MembersInjector.create(providesTwitterClientProvider);

    this.composeActivityMembersInjector =
        ComposeActivity_MembersInjector.create(providesSharedPreferencesProvider);

    this.providesNetworkUtilProvider =
        TwitterModule_ProvidesNetworkUtilFactory.create(builder.twitterModule);

    this.tweetActivityMembersInjector =
        TweetActivity_MembersInjector.create(
            providesTwitterClientProvider, providesNetworkUtilProvider);

    this.homeTimelineFragmentMembersInjector =
        HomeTimelineFragment_MembersInjector.create(
            providesNetworkUtilProvider, providesTwitterClientProvider);

    this.mentionsTimelineFragmentMembersInjector =
        MentionsTimelineFragment_MembersInjector.create(
            providesNetworkUtilProvider,
            providesTwitterClientProvider,
            providesSharedPreferencesProvider);

    this.userTimelineFragmentMembersInjector =
        UserTimelineFragment_MembersInjector.create(
            providesNetworkUtilProvider,
            providesTwitterClientProvider,
            providesSharedPreferencesProvider);
  }

  @Override
  public void inject(TimelineActivity timelineActivity) {
    timelineActivityMembersInjector.injectMembers(timelineActivity);
  }

  @Override
  public void inject(ProfileActivity profileActivity) {
    profileActivityMembersInjector.injectMembers(profileActivity);
  }

  @Override
  public void inject(ComposeActivity composeActivity) {
    composeActivityMembersInjector.injectMembers(composeActivity);
  }

  @Override
  public void inject(TweetActivity tweetActivity) {
    tweetActivityMembersInjector.injectMembers(tweetActivity);
  }

  @Override
  public void inject(HomeTimelineFragment homeTimelineFragment) {
    homeTimelineFragmentMembersInjector.injectMembers(homeTimelineFragment);
  }

  @Override
  public void inject(MentionsTimelineFragment mentionsTimelineFragment) {
    mentionsTimelineFragmentMembersInjector.injectMembers(mentionsTimelineFragment);
  }

  @Override
  public void inject(UserTimelineFragment userTimelineFragment) {
    userTimelineFragmentMembersInjector.injectMembers(userTimelineFragment);
  }

  public static final class Builder {
    private AppModule appModule;

    private TwitterModule twitterModule;

    private Builder() {}

    public TwitterComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (twitterModule == null) {
        throw new IllegalStateException(TwitterModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerTwitterComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder twitterModule(TwitterModule twitterModule) {
      this.twitterModule = Preconditions.checkNotNull(twitterModule);
      return this;
    }
  }
}
